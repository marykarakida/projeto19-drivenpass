generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  refreshToken String?
  Credential   Credential[]
  Note         Note[]
  Card         Card[]
  Wifi         Wifi[]

  @@map("users")
}

model Credential {
  id        String   @id @default(uuid())
  ownerId   String
  title     String
  url       String
  username  String
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ownerId, title])
  @@map("credentials")
}

model Note {
  id        String   @id @default(uuid())
  ownerId   String
  title     String
  note      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ownerId, title])
  @@map("notes")
}

enum CardType {
  credit
  debit
  both

  @@map("cardTypes")
}

model Card {
  id             String   @id @default(uuid())
  ownerId        String
  title          String
  number         String
  cardHolderName String
  expirationDate String
  securityCode   String
  password       String
  isVirtual      Boolean
  type           CardType
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  User           User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([ownerId, title])
  @@map("cards")
}

model Wifi {
  id          String   @id @default(uuid())
  ownerId     String
  title       String
  networkName String
  password    String
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  User        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("wifis")
}
